// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Incident should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Incident
    problem="gremlins"
    solution="don't feed after midnight"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <pure(DeleteRoundedIcon)
          className="trash-can"
          onClick={[Function]}
        />,
        <pure(CreateIcon)
          className="pencil"
        />,
        <WithStyles(CardContent)>
          <div
            className="card-section"
          >
            <WithStyles(Typography)
              component="h2"
              variant="h5"
            >
              Problem:
            </WithStyles(Typography)>
            <div
              className="stacktrace"
            >
              <ReactMarkdown
                astPlugins={Array []}
                escapeHtml={true}
                id="problem-markdown"
                parserOptions={Object {}}
                plugins={Array []}
                rawSourcePos={false}
                renderers={Object {}}
                skipHtml={false}
                source="\`\`\`
gremlins
\`\`\`"
                sourcePos={false}
                transformLinkUri={[Function]}
              />
            </div>
          </div>
          <div
            className="card-section"
          >
            <WithStyles(Typography)
              component="h2"
              variant="h5"
            >
              Solution:
            </WithStyles(Typography)>
            <ReactMarkdown
              astPlugins={Array []}
              escapeHtml={true}
              id="solution-markdown"
              parserOptions={Object {}}
              plugins={Array []}
              rawSourcePos={false}
              renderers={Object {}}
              skipHtml={false}
              source="don't feed after midnight"
              sourcePos={false}
              transformLinkUri={[Function]}
            />
          </div>
        </WithStyles(CardContent)>,
      ],
      "className": "incident-card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "trash-can",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "pencil",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <div
              className="card-section"
            >
              <WithStyles(Typography)
                component="h2"
                variant="h5"
              >
                Problem:
              </WithStyles(Typography)>
              <div
                className="stacktrace"
              >
                <ReactMarkdown
                  astPlugins={Array []}
                  escapeHtml={true}
                  id="problem-markdown"
                  parserOptions={Object {}}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={Object {}}
                  skipHtml={false}
                  source="\`\`\`
gremlins
\`\`\`"
                  sourcePos={false}
                  transformLinkUri={[Function]}
                />
              </div>
            </div>,
            <div
              className="card-section"
            >
              <WithStyles(Typography)
                component="h2"
                variant="h5"
              >
                Solution:
              </WithStyles(Typography)>
              <ReactMarkdown
                astPlugins={Array []}
                escapeHtml={true}
                id="solution-markdown"
                parserOptions={Object {}}
                plugins={Array []}
                rawSourcePos={false}
                renderers={Object {}}
                skipHtml={false}
                source="don't feed after midnight"
                sourcePos={false}
                transformLinkUri={[Function]}
              />
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  component="h2"
                  variant="h5"
                >
                  Problem:
                </WithStyles(Typography)>,
                <div
                  className="stacktrace"
                >
                  <ReactMarkdown
                    astPlugins={Array []}
                    escapeHtml={true}
                    id="problem-markdown"
                    parserOptions={Object {}}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={Object {}}
                    skipHtml={false}
                    source="\`\`\`
gremlins
\`\`\`"
                    sourcePos={false}
                    transformLinkUri={[Function]}
                  />
                </div>,
              ],
              "className": "card-section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Problem:",
                  "component": "h2",
                  "variant": "h5",
                },
                "ref": null,
                "rendered": "Problem:",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <ReactMarkdown
                    astPlugins={Array []}
                    escapeHtml={true}
                    id="problem-markdown"
                    parserOptions={Object {}}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={Object {}}
                    skipHtml={false}
                    source="\`\`\`
gremlins
\`\`\`"
                    sourcePos={false}
                    transformLinkUri={[Function]}
                  />,
                  "className": "stacktrace",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "astPlugins": Array [],
                    "escapeHtml": true,
                    "id": "problem-markdown",
                    "parserOptions": Object {},
                    "plugins": Array [],
                    "rawSourcePos": false,
                    "renderers": Object {},
                    "skipHtml": false,
                    "source": "\`\`\`
gremlins
\`\`\`",
                    "sourcePos": false,
                    "transformLinkUri": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  component="h2"
                  variant="h5"
                >
                  Solution:
                </WithStyles(Typography)>,
                <ReactMarkdown
                  astPlugins={Array []}
                  escapeHtml={true}
                  id="solution-markdown"
                  parserOptions={Object {}}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={Object {}}
                  skipHtml={false}
                  source="don't feed after midnight"
                  sourcePos={false}
                  transformLinkUri={[Function]}
                />,
              ],
              "className": "card-section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Solution:",
                  "component": "h2",
                  "variant": "h5",
                },
                "ref": null,
                "rendered": "Solution:",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "astPlugins": Array [],
                  "escapeHtml": true,
                  "id": "solution-markdown",
                  "parserOptions": Object {},
                  "plugins": Array [],
                  "rawSourcePos": false,
                  "renderers": Object {},
                  "skipHtml": false,
                  "source": "don't feed after midnight",
                  "sourcePos": false,
                  "transformLinkUri": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <pure(DeleteRoundedIcon)
            className="trash-can"
            onClick={[Function]}
          />,
          <pure(CreateIcon)
            className="pencil"
          />,
          <WithStyles(CardContent)>
            <div
              className="card-section"
            >
              <WithStyles(Typography)
                component="h2"
                variant="h5"
              >
                Problem:
              </WithStyles(Typography)>
              <div
                className="stacktrace"
              >
                <ReactMarkdown
                  astPlugins={Array []}
                  escapeHtml={true}
                  id="problem-markdown"
                  parserOptions={Object {}}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={Object {}}
                  skipHtml={false}
                  source="\`\`\`
gremlins
\`\`\`"
                  sourcePos={false}
                  transformLinkUri={[Function]}
                />
              </div>
            </div>
            <div
              className="card-section"
            >
              <WithStyles(Typography)
                component="h2"
                variant="h5"
              >
                Solution:
              </WithStyles(Typography)>
              <ReactMarkdown
                astPlugins={Array []}
                escapeHtml={true}
                id="solution-markdown"
                parserOptions={Object {}}
                plugins={Array []}
                rawSourcePos={false}
                renderers={Object {}}
                skipHtml={false}
                source="don't feed after midnight"
                sourcePos={false}
                transformLinkUri={[Function]}
              />
            </div>
          </WithStyles(CardContent)>,
        ],
        "className": "incident-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "trash-can",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "pencil",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <div
                className="card-section"
              >
                <WithStyles(Typography)
                  component="h2"
                  variant="h5"
                >
                  Problem:
                </WithStyles(Typography)>
                <div
                  className="stacktrace"
                >
                  <ReactMarkdown
                    astPlugins={Array []}
                    escapeHtml={true}
                    id="problem-markdown"
                    parserOptions={Object {}}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={Object {}}
                    skipHtml={false}
                    source="\`\`\`
gremlins
\`\`\`"
                    sourcePos={false}
                    transformLinkUri={[Function]}
                  />
                </div>
              </div>,
              <div
                className="card-section"
              >
                <WithStyles(Typography)
                  component="h2"
                  variant="h5"
                >
                  Solution:
                </WithStyles(Typography)>
                <ReactMarkdown
                  astPlugins={Array []}
                  escapeHtml={true}
                  id="solution-markdown"
                  parserOptions={Object {}}
                  plugins={Array []}
                  rawSourcePos={false}
                  renderers={Object {}}
                  skipHtml={false}
                  source="don't feed after midnight"
                  sourcePos={false}
                  transformLinkUri={[Function]}
                />
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Typography)
                    component="h2"
                    variant="h5"
                  >
                    Problem:
                  </WithStyles(Typography)>,
                  <div
                    className="stacktrace"
                  >
                    <ReactMarkdown
                      astPlugins={Array []}
                      escapeHtml={true}
                      id="problem-markdown"
                      parserOptions={Object {}}
                      plugins={Array []}
                      rawSourcePos={false}
                      renderers={Object {}}
                      skipHtml={false}
                      source="\`\`\`
gremlins
\`\`\`"
                      sourcePos={false}
                      transformLinkUri={[Function]}
                    />
                  </div>,
                ],
                "className": "card-section",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Problem:",
                    "component": "h2",
                    "variant": "h5",
                  },
                  "ref": null,
                  "rendered": "Problem:",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <ReactMarkdown
                      astPlugins={Array []}
                      escapeHtml={true}
                      id="problem-markdown"
                      parserOptions={Object {}}
                      plugins={Array []}
                      rawSourcePos={false}
                      renderers={Object {}}
                      skipHtml={false}
                      source="\`\`\`
gremlins
\`\`\`"
                      sourcePos={false}
                      transformLinkUri={[Function]}
                    />,
                    "className": "stacktrace",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "astPlugins": Array [],
                      "escapeHtml": true,
                      "id": "problem-markdown",
                      "parserOptions": Object {},
                      "plugins": Array [],
                      "rawSourcePos": false,
                      "renderers": Object {},
                      "skipHtml": false,
                      "source": "\`\`\`
gremlins
\`\`\`",
                      "sourcePos": false,
                      "transformLinkUri": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Typography)
                    component="h2"
                    variant="h5"
                  >
                    Solution:
                  </WithStyles(Typography)>,
                  <ReactMarkdown
                    astPlugins={Array []}
                    escapeHtml={true}
                    id="solution-markdown"
                    parserOptions={Object {}}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={Object {}}
                    skipHtml={false}
                    source="don't feed after midnight"
                    sourcePos={false}
                    transformLinkUri={[Function]}
                  />,
                ],
                "className": "card-section",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Solution:",
                    "component": "h2",
                    "variant": "h5",
                  },
                  "ref": null,
                  "rendered": "Solution:",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "astPlugins": Array [],
                    "escapeHtml": true,
                    "id": "solution-markdown",
                    "parserOptions": Object {},
                    "plugins": Array [],
                    "rawSourcePos": false,
                    "renderers": Object {},
                    "skipHtml": false,
                    "source": "don't feed after midnight",
                    "sourcePos": false,
                    "transformLinkUri": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
